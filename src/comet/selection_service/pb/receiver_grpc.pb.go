// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SelectionServiceClient is the client API for SelectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelectionServiceClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackReply, error)
}

type selectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectionServiceClient(cc grpc.ClientConnInterface) SelectionServiceClient {
	return &selectionServiceClient{cc}
}

func (c *selectionServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/pb.SelectionService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionServiceClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackReply, error) {
	out := new(FeedbackReply)
	err := c.cc.Invoke(ctx, "/pb.SelectionService/Feedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectionServiceServer is the server API for SelectionService service.
// All implementations must embed UnimplementedSelectionServiceServer
// for forward compatibility
type SelectionServiceServer interface {
	Query(context.Context, *QueryRequest) (*QueryReply, error)
	Feedback(context.Context, *FeedbackRequest) (*FeedbackReply, error)
	mustEmbedUnimplementedSelectionServiceServer()
}

// UnimplementedSelectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSelectionServiceServer struct {
}

func (*UnimplementedSelectionServiceServer) Query(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedSelectionServiceServer) Feedback(context.Context, *FeedbackRequest) (*FeedbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feedback not implemented")
}
func (*UnimplementedSelectionServiceServer) mustEmbedUnimplementedSelectionServiceServer() {}

func RegisterSelectionServiceServer(s *grpc.Server, srv SelectionServiceServer) {
	s.RegisterService(&_SelectionService_serviceDesc, srv)
}

func _SelectionService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SelectionService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionService_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServiceServer).Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SelectionService/Feedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServiceServer).Feedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SelectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SelectionService",
	HandlerType: (*SelectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _SelectionService_Query_Handler,
		},
		{
			MethodName: "Feedback",
			Handler:    _SelectionService_Feedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "selection_service/pb/receiver.proto",
}
