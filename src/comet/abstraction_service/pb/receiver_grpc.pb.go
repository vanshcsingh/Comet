// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AbstractionServiceClient is the client API for AbstractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbstractionServiceClient interface {
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error)
}

type abstractionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAbstractionServiceClient(cc grpc.ClientConnInterface) AbstractionServiceClient {
	return &abstractionServiceClient{cc}
}

func (c *abstractionServiceClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error) {
	out := new(PredictReply)
	err := c.cc.Invoke(ctx, "/pb.AbstractionService/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbstractionServiceServer is the server API for AbstractionService service.
// All implementations must embed UnimplementedAbstractionServiceServer
// for forward compatibility
type AbstractionServiceServer interface {
	Predict(context.Context, *PredictRequest) (*PredictReply, error)
	mustEmbedUnimplementedAbstractionServiceServer()
}

// UnimplementedAbstractionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAbstractionServiceServer struct {
}

func (*UnimplementedAbstractionServiceServer) Predict(context.Context, *PredictRequest) (*PredictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (*UnimplementedAbstractionServiceServer) mustEmbedUnimplementedAbstractionServiceServer() {}

func RegisterAbstractionServiceServer(s *grpc.Server, srv AbstractionServiceServer) {
	s.RegisterService(&_AbstractionService_serviceDesc, srv)
}

func _AbstractionService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbstractionServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AbstractionService/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbstractionServiceServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AbstractionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AbstractionService",
	HandlerType: (*AbstractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _AbstractionService_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abstraction_service/pb/receiver.proto",
}
