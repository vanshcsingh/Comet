// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AbstractionServiceClient is the client API for AbstractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbstractionServiceClient interface {
	PredictSetup(ctx context.Context, in *PredictSetupRequest, opts ...grpc.CallOption) (*PredictSetupReply, error)
	Predict(ctx context.Context, opts ...grpc.CallOption) (AbstractionService_PredictClient, error)
}

type abstractionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAbstractionServiceClient(cc grpc.ClientConnInterface) AbstractionServiceClient {
	return &abstractionServiceClient{cc}
}

func (c *abstractionServiceClient) PredictSetup(ctx context.Context, in *PredictSetupRequest, opts ...grpc.CallOption) (*PredictSetupReply, error) {
	out := new(PredictSetupReply)
	err := c.cc.Invoke(ctx, "/pb.AbstractionService/PredictSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abstractionServiceClient) Predict(ctx context.Context, opts ...grpc.CallOption) (AbstractionService_PredictClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AbstractionService_serviceDesc.Streams[0], "/pb.AbstractionService/Predict", opts...)
	if err != nil {
		return nil, err
	}
	x := &abstractionServicePredictClient{stream}
	return x, nil
}

type AbstractionService_PredictClient interface {
	Send(*Pixel) error
	CloseAndRecv() (*PredictReply, error)
	grpc.ClientStream
}

type abstractionServicePredictClient struct {
	grpc.ClientStream
}

func (x *abstractionServicePredictClient) Send(m *Pixel) error {
	return x.ClientStream.SendMsg(m)
}

func (x *abstractionServicePredictClient) CloseAndRecv() (*PredictReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PredictReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AbstractionServiceServer is the server API for AbstractionService service.
// All implementations must embed UnimplementedAbstractionServiceServer
// for forward compatibility
type AbstractionServiceServer interface {
	PredictSetup(context.Context, *PredictSetupRequest) (*PredictSetupReply, error)
	Predict(AbstractionService_PredictServer) error
	mustEmbedUnimplementedAbstractionServiceServer()
}

// UnimplementedAbstractionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAbstractionServiceServer struct {
}

func (*UnimplementedAbstractionServiceServer) PredictSetup(context.Context, *PredictSetupRequest) (*PredictSetupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictSetup not implemented")
}
func (*UnimplementedAbstractionServiceServer) Predict(AbstractionService_PredictServer) error {
	return status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (*UnimplementedAbstractionServiceServer) mustEmbedUnimplementedAbstractionServiceServer() {}

func RegisterAbstractionServiceServer(s *grpc.Server, srv AbstractionServiceServer) {
	s.RegisterService(&_AbstractionService_serviceDesc, srv)
}

func _AbstractionService_PredictSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbstractionServiceServer).PredictSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AbstractionService/PredictSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbstractionServiceServer).PredictSetup(ctx, req.(*PredictSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbstractionService_Predict_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AbstractionServiceServer).Predict(&abstractionServicePredictServer{stream})
}

type AbstractionService_PredictServer interface {
	SendAndClose(*PredictReply) error
	Recv() (*Pixel, error)
	grpc.ServerStream
}

type abstractionServicePredictServer struct {
	grpc.ServerStream
}

func (x *abstractionServicePredictServer) SendAndClose(m *PredictReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *abstractionServicePredictServer) Recv() (*Pixel, error) {
	m := new(Pixel)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AbstractionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AbstractionService",
	HandlerType: (*AbstractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PredictSetup",
			Handler:    _AbstractionService_PredictSetup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Predict",
			Handler:       _AbstractionService_Predict_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "abstraction_service/pb/receiver.proto",
}
